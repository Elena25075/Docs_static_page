// package.json
{
  "name": "jetformbuilder-docs",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "export": "next build && next export",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@next/mdx": "^14.0.0",
    "@mdx-js/loader": "^3.0.0",
    "@mdx-js/react": "^3.0.0",
    "gray-matter": "^4.0.3",
    "rehype-highlight": "^7.0.0",
    "rehype-slug": "^6.0.0",
    "remark-gfm": "^4.0.0",
    "lucide-react": "^0.263.1",
    "framer-motion": "^10.16.0",
    "fuse.js": "^7.0.0",
    "clsx": "^2.0.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "autoprefixer": "^10.4.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "^14.0.0",
    "postcss": "^8.4.0",
    "tailwindcss": "^3.3.0",
    "typescript": "^5.0.0"
  }
}

// next.config.js
const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
  options: {
    remarkPlugins: [require('remark-gfm')],
    rehypePlugins: [require('rehype-highlight'), require('rehype-slug')],
  },
})

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['ts', 'tsx', 'js', 'jsx', 'md', 'mdx'],
  output: 'export',
  trailingSlash: true,
  images: {
    unoptimized: true
  },
  experimental: {
    mdxRs: false,
  }
}

module.exports = withMDX(nextConfig)

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#2563eb',
          600: '#1d4ed8',
          700: '#1e40af',
        },
        secondary: {
          500: '#6b7280',
          600: '#4b5563',
        },
        success: {
          500: '#10b981',
        },
        warning: {
          500: '#f59e0b',
        },
        error: {
          500: '#ef4444',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'Consolas', 'monospace'],
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: 'none',
            color: '#374151',
            a: {
              color: '#2563eb',
              textDecoration: 'none',
              '&:hover': {
                color: '#1d4ed8',
              },
            },
            'h1, h2, h3, h4': {
              color: '#111827',
            },
            code: {
              color: '#111827',
              backgroundColor: '#f3f4f6',
              padding: '0.25rem 0.375rem',
              borderRadius: '0.25rem',
              fontSize: '0.875em',
            },
            'code::before': {
              content: '""',
            },
            'code::after': {
              content: '""',
            },
          },
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}

// netlify.toml
[build]
  publish = "out"
  command = "npm run export"

[build.environment]
  NODE_VERSION = "18"

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

[[headers]]
  for = "*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

// tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}

// app/layout.tsx
import React from 'react'
import './globals.css'
import { Inter } from 'next/font/google'
import { Providers } from './providers'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'JetFormBuilder Documentation',
  description: 'Complete guide to building powerful forms with JetFormBuilder',
  keywords: 'JetFormBuilder, forms, WordPress, documentation, tutorial',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body className="bg-white text-gray-900">
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  )
}

// app/providers.tsx
'use client'
import React, { createContext, useContext, useState, useEffect } from 'react'

interface SearchContextType {
  searchQuery: string
  setSearchQuery: (query: string) => void
  searchResults: any[]
  setSearchResults: (results: any[]) => void
}

const SearchContext = createContext<SearchContextType | undefined>(undefined)

export function Providers({ children }: { children: React.ReactNode }) {
  const [searchQuery, setSearchQuery] = useState('')
  const [searchResults, setSearchResults] = useState([])

  return (
    <SearchContext.Provider value={{
      searchQuery,
      setSearchQuery,
      searchResults,
      setSearchResults
    }}>
      {children}
    </SearchContext.Provider>
  )
}

export const useSearch = () => {
  const context = useContext(SearchContext)
  if (!context) {
    throw new Error('useSearch must be used within a Providers')
  }
  return context
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap');

@layer base {
  html {
    scroll-behavior: smooth;
  }
  
  body {
    font-feature-settings: 'rlig' 1, 'calt' 1;
  }
}

@layer components {
  .prose-custom {
    @apply prose prose-lg max-w-none;
  }
  
  .prose-custom pre {
    @apply bg-gray-900 text-gray-100 rounded-lg p-4 overflow-x-auto;
  }
  
  .prose-custom code {
    @apply text-sm font-mono;
  }
  
  .prose-custom blockquote {
    @apply border-l-4 border-primary-500 bg-primary-50 p-4 rounded-r-lg;
  }
}

/* Syntax highlighting */
.hljs {
  @apply bg-gray-900 text-gray-100;
}

.hljs-keyword {
  @apply text-purple-400;
}

.hljs-string {
  @apply text-green-400;
}

.hljs-number {
  @apply text-blue-400;
}

.hljs-comment {
  @apply text-gray-500;
}

// app/page.tsx
import React from 'react'
import Link from 'next/link'
import { ChevronRight, BookOpen, Zap, Code, Palette, Puzzle, LifeBuoy } from 'lucide-react'
import Header from '@/components/Header'
import Footer from '@/components/Footer'
import QuickStartCard from '@/components/QuickStartCard'

export default function HomePage() {
  const navigationCards = [
    {
      title: 'Get Started',
      description: 'Quick setup and your first form in 5 minutes',
      icon: <Zap className="w-6 h-6" />,
      href: '/get-started',
      color: 'bg-blue-50 border-blue-200 hover:bg-blue-100'
    },
    {
      title: 'Build Forms',
      description: 'Fields, logic, validation, and multi-step forms',
      icon: <BookOpen className="w-6 h-6" />,
      href: '/build-forms',
      color: 'bg-green-50 border-green-200 hover:bg-green-100'
    },
    {
      title: 'Process Submissions',
      description: 'Actions, notifications, and data handling',
      icon: <Code className="w-6 h-6" />,
      href: '/process-submissions',
      color: 'bg-purple-50 border-purple-200 hover:bg-purple-100'
    },
    {
      title: 'Integrate & Extend',
      description: 'Payments, email marketing, and automation',
      icon: <Puzzle className="w-6 h-6" />,
      href: '/integrate-extend',
      color: 'bg-orange-50 border-orange-200 hover:bg-orange-100'
    },
    {
      title: 'Customize & Style',
      description: 'Design, themes, and responsive layouts',
      icon: <Palette className="w-6 h-6" />,
      href: '/customize-style',
      color: 'bg-pink-50 border-pink-200 hover:bg-pink-100'
    },
    {
      title: 'Examples & Support',
      description: 'Use cases, tutorials, and troubleshooting',
      icon: <LifeBuoy className="w-6 h-6" />,
      href: '/examples-support',
      color: 'bg-gray-50 border-gray-200 hover:bg-gray-100'
    }
  ]

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      <main className="flex-1">
        {/* Hero Section */}
        <section className="bg-gradient-to-br from-primary-50 to-blue-100 py-20">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center">
              <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
                JetFormBuilder
                <span className="text-primary-600"> Documentation</span>
              </h1>
              <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
                Complete guide to building powerful, flexible forms with JetFormBuilder. 
                From simple contact forms to complex multi-step workflows.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link 
                  href="/get-started" 
                  className="bg-primary-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-primary-700 transition-colors inline-flex items-center"
                >
                  Get Started
                  <ChevronRight className="ml-2 w-4 h-4" />
                </Link>
                <Link 
                  href="/examples-support" 
                  className="border border-gray-300 text-gray-700 px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors"
                >
                  View Examples
                </Link>
              </div>
            </div>
          </div>
        </section>

        {/* Quick Start */}
        <section className="py-16 bg-white">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Quick Start Guide
              </h2>
              <p className="text-lg text-gray-600">
                Get your first form up and running in minutes
              </p>
            </div>
            <QuickStartCard />
          </div>
        </section>

        {/* Navigation Cards */}
        <section className="py-16 bg-gray-50">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Explore the Documentation
              </h2>
              <p className="text-lg text-gray-600">
                Find exactly what you need with our organized, task-oriented guide
              </p>
            </div>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {navigationCards.map((card, index) => (
                <Link 
                  key={index}
                  href={card.href}
                  className={`block p-6 border-2 rounded-xl transition-all hover:shadow-lg ${card.color}`}
                >
                  <div className="flex items-start space-x-4">
                    <div className="flex-shrink-0">
                      {card.icon}
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-2">
                        {card.title}
                      </h3>
                      <p className="text-gray-600">
                        {card.description}
                      </p>
                    </div>
                  </div>
                </Link>
              ))}
            </div>
          </div>
        </section>

        {/* Popular Topics */}
        <section className="py-16 bg-white">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Popular Topics
              </h2>
              <p className="text-lg text-gray-600">
                Most searched and helpful documentation
              </p>
            </div>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[
                { title: 'Creating Your First Form', href: '/get-started/first-form' },
                { title: 'Payment Integration', href: '/integrate-extend/payments' },
                { title: 'Conditional Logic', href: '/build-forms/conditional-logic' },
                { title: 'Email Notifications', href: '/process-submissions/notifications' },
                { title: 'Custom Styling', href: '/customize-style/css-customization' },
                { title: 'Multi-Step Forms', href: '/build-forms/multi-step' },
                { title: 'File Uploads', href: '/build-forms/fields/file-upload' },
                { title: 'Troubleshooting', href: '/examples-support/troubleshooting' }
              ].map((topic, index) => (
                <Link 
                  key={index}
                  href={topic.href}
                  className="block p-4 border border-gray-200 rounded-lg hover:border-primary-300 hover:bg-primary-50 transition-colors"
                >
                  <span className="text-sm font-medium text-gray-900 hover:text-primary-600">
                    {topic.title}
                  </span>
                </Link>
              ))}
            </div>
          </div>
        </section>
      </main>

      <Footer />
    </div>
  )
}

// components/Header.tsx
'use client'
import React, { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Search, Menu, X, ExternalLink } from 'lucide-react'
import SearchModal from './SearchModal'
import { clsx } from 'clsx'

const navigation = [
  { name: 'Get Started', href: '/get-started' },
  { name: 'Build', href: '/build-forms' },
  { name: 'Process', href: '/process-submissions' },
  { name: 'Integrate', href: '/integrate-extend' },
  { name: 'Customize', href: '/customize-style' },
  { name: 'Examples', href: '/examples-support' },
]

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isSearchOpen, setIsSearchOpen] = useState(false)
  const pathname = usePathname()

  return (
    <>
      <header className="bg-white border-b border-gray-200 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <div className="flex items-center">
              <Link href="/" className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">JFB</span>
                </div>
                <span className="font-bold text-xl text-gray-900">
                  JetFormBuilder <span className="text-sm font-normal text-gray-500">Docs</span>
                </span>
              </Link>
            </div>

            {/* Desktop Navigation */}
            <nav className="hidden md:flex space-x-8">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={clsx(
                    'text-sm font-medium transition-colors',
                    pathname?.startsWith(item.href)
                      ? 'text-primary-600'
                      : 'text-gray-700 hover:text-primary-600'
                  )}
                >
                  {item.name}
                </Link>
              ))}
            </nav>

            {/* Search and Actions */}
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setIsSearchOpen(true)}
                className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
              >
                <Search className="w-5 h-5" />
              </button>
              
              <a
                href="https://crocoblock.com/plugins/jetformbuilder/"
                target="_blank"
                rel="noopener noreferrer"
                className="hidden sm:inline-flex items-center text-sm font-medium text-gray-700 hover:text-primary-600"
              >
                Plugin Page
                <ExternalLink className="ml-1 w-4 h-4" />
              </a>

              {/* Mobile menu button */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="md:hidden p-2 text-gray-400 hover:text-gray-600"
              >
                {isMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white border-t border-gray-200">
            <div className="px-4 py-2 space-y-1">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={clsx(
                    'block px-3 py-2 text-base font-medium rounded-md transition-colors',
                    pathname?.startsWith(item.href)
                      ? 'text-primary-600 bg-primary-50'
                      : 'text-gray-700 hover:text-primary-600 hover:bg-gray-50'
                  )}
                  onClick={() => setIsMenuOpen(false)}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
        )}
      </header>

      <SearchModal isOpen={isSearchOpen} onClose={() => setIsSearchOpen(false)} />
    </>
  )
}

// components/Footer.tsx
import React from 'react'
import Link from 'next/link'
import { ExternalLink } from 'lucide-react'

export default function Footer() {
  return (
    <footer className="bg-gray-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Company Info */}
          <div className="col-span-1">
            <div className="flex items-center space-x-2 mb-4">
              <div className="w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">JFB</span>
              </div>
              <span className="font-bold text-xl">JetFormBuilder</span>
            </div>
            <p className="text-gray-400 text-sm">
              Powerful form builder for WordPress. Create complex forms with ease.
            </p>
          </div>

          {/* Documentation Links */}
          <div>
            <h3 className="font-semibold mb-4">Documentation</h3>
            <ul className="space-y-2 text-sm">
              <li><Link href="/get-started" className="text-gray-400 hover:text-white">Get Started</Link></li>
              <li><Link href="/build-forms" className="text-gray-400 hover:text-white">Build Forms</Link></li>
              <li><Link href="/integrate-extend" className="text-gray-400 hover:text-white">Integrations</Link></li>
              <li><Link href="/examples-support" className="text-gray-400 hover:text-white">Examples</Link></li>
            </ul>
          </div>

          {/* Resources */}
          <div>
            <h3 className="font-semibold mb-4">Resources</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <a 
                  href="https://crocoblock.com/plugins/jetformbuilder/" 
                  className="text-gray-400 hover:text-white inline-flex items-center"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Plugin Page <ExternalLink className="ml-1 w-3 h-3" />
                </a>
              </li>
              <li>
                <a 
                  href="https://crocoblock.com/support/" 
                  className="text-gray-400 hover:text-white inline-flex items-center"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Support <ExternalLink className="ml-1 w-3 h-3" />
                </a>
              </li>
              <li>
                <a 
                  href="https://crocoblock.com/knowledge-base/" 
                  className="text-gray-400 hover:text-white inline-flex items-center"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Knowledge Base <ExternalLink className="ml-1 w-3 h-3" />
                </a>
              </li>
            </ul>
          </div>

          {/* Community */}
          <div>
            <h3 className="font-semibold mb-4">Community</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <a 
                  href="https://www.facebook.com/groups/crocoblock" 
                  className="text-gray-400 hover:text-white inline-flex items-center"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Facebook Group <ExternalLink className="ml-1 w-3 h-3" />
                </a>
              </li>
              <li>
                <a 
                  href="https://www.youtube.com/c/CrocoblockWebsite" 
                  className="text-gray-400 hover:text-white inline-flex items-center"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  YouTube <ExternalLink className="ml-1 w-3 h-3" />
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t border-gray-800 mt-8 pt-8 text-center text-sm text-gray-400">
          <p>&copy; 2024 Crocoblock. All rights reserved. Built with ❤️ for the WordPress community.</p>
        </div>
      </div>
    </footer>
  )
}

// components/SearchModal.tsx
'use client'
import React, { useState, useEffect } from 'react'
import { Search, X } from 'lucide-react'
import { useSearch } from '@/app/providers'

interface SearchModalProps {
  isOpen: boolean
  onClose: () => void
}

export default function SearchModal({ isOpen, onClose }: SearchModalProps) {
  const [query, setQuery] = useState('')
  const { setSearchQuery } = useSearch()

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }

    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    setSearchQuery(query)
    onClose()
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-start justify-center pt-20">
      <div className="fixed inset-0 bg-black bg-opacity-50" onClick={onClose} />
      
      <div className="relative bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
        <form onSubmit={handleSearch} className="flex items-center p-4 border-b">
          <Search className="w-5 h-5 text-gray-400 mr-3" />
          <input
            type="text"
            placeholder="Search documentation..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="flex-1 outline-none text-lg"
            autoFocus
          />
          <button
            type="button"
            onClick={onClose}
            className="ml-3 p-1 text-gray-400 hover:text-gray-600"
          >
            <X className="w-5 h-5" />
          </button>
        </form>

        <div className="p-4">
          <div className="text-sm text-gray-500 mb-4">
            Popular searches
          </div>
          <div className="space-y-2">
            {[
              'Creating a form',
              'Payment integration',
              'Conditional logic',
              'Email notifications',
              'Multi-step forms'
            ].map((suggestion, index) => (
              <button
                key={index}
                onClick={() => {
                  setQuery(suggestion)
                  setSearchQuery(suggestion)
                  onClose()
                }}
                className="block w-full text-left px-3 py-2 rounded hover:bg-gray-100 text-sm"
              >
                {suggestion}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

// components/QuickStartCard.tsx
'use client'
import React, { useState } from 'react'
import { ChevronRight, Check } from 'lucide-react'
import Link from 'next/link'

export default function QuickStartCard() {
  const [completedSteps, setCompletedSteps] = useState<number[]>([])

  const steps = [
    {
      title: 'Install JetFormBuilder',
      description: 'Download and activate the plugin',
      href: '/get-started/installation'
    },
    {
      title: 'Create Your First Form',
      description: 'Add fields and configure basic settings',
      href: '/get-started/first-form'
    },
    {
      title: 'Add to Your Page',
      description: 'Display the form on your website',
      href: '/get-started/display-form'
    },
    {
      title: 'Configure Actions',
      description: 'Set up what happens after form submission',
      href: '/process-submissions/actions'
    }
  ]

  const toggleStep = (index: number) => {
    setCompletedSteps(prev => 
      prev.includes(index) 
        ? prev.filter(i => i !== index)
        : [...prev, index]
    )
  }

  return (
    <div className="bg-white rounded-xl border border-gray-200 p-6 max-w-2xl mx-auto">
      <h3 className="text-xl font-semibold text-gray-900 mb-4">
        Quick Start Checklist
      </h3>
      <div className="space-y-3">
        {steps.map((step, index) => (
          <div key={index} className="flex items-center space-x-3">
            <button
              onClick={() => toggleStep(index)}
              className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${
                completedSteps.includes(index)
                  ? 'bg-success-500 border-success-500 text-white'
                  : 'border-gray-300 hover:border-success-500'
              }`}
            >
              {completedSteps.includes(index) && <Check className="w-4 h-4" />}
            </button>
            <div className="flex-1">
              <Link href={step.href} className="block hover:bg-gray-50 p-2 rounded-lg transition-colors">
                <h4 className="font-medium text-gray-900">{step.title}</h4>
                <p className="text-sm text-gray-600">{step.description}</p>
              </Link>
            </div>
            <ChevronRight className="w-4 h-4 text-gray-400" />
          </div>
        ))}
      </div>
      <div className="mt-6 pt-4 border-t border-gray-200">
        <Link
          href="/get-started"
          className="inline-flex items-center text-primary-600 font-medium hover:text-primary-700"
        >
          View detailed guide
          <ChevronRight className="ml-1 w-4 h-4" />
        </Link>
      </div>
    </div>
  )
}

// components/Sidebar.tsx
'use client'
import React, { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { ChevronDown, ChevronRight } from 'lucide-react'
import { clsx } from 'clsx'

interface SidebarItem {
  title: string
  href?: string
  children?: SidebarItem[]
}

interface SidebarProps {
  navigation: SidebarItem[]
}

export default function Sidebar({ navigation }: SidebarProps) {
  const [expandedItems, setExpandedItems] = useState<string[]>([])
  const pathname = usePathname()

  const toggleExpanded = (title: string) => {
    setExpandedItems(prev =>
      prev.includes(title)
        ? prev.filter(item => item !== title)
        : [...prev, title]
    )
  }

  const isActive = (href: string) => pathname === href
  const isParentActive = (item: SidebarItem): boolean => {
    if (item.href && isActive(item.href)) return true
    return item.children?.some(child => isParentActive(child)) || false
  }

  const renderItem = (item: SidebarItem, level = 0) => {
    const hasChildren = item.children && item.children.length > 0
    const isExpanded = expandedItems.includes(item.title)
    const isItemActive = item.href ? isActive(item.href) : isParentActive(item)

    return (
      <div key={item.title}>
        <div className={clsx(
          'flex items-center justify-between py-2 px-3 rounded-lg text-sm transition-colors',
          level > 0 && 'ml-4',
          isItemActive 
            ? 'bg-primary-50 text-primary-700 font-medium' 
            : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
        )}>
          {item.href ? (
            <Link href={item.href} className="flex-1">
              {item.title}
            </Link>
          ) : (
            <span className="flex-1">{item.title}</span>
          )}
          
          {hasChildren && (
            <button
              onClick={() => toggleExpanded(item.title)}
              className="p-1 hover:bg-gray-200 rounded"
            >
              {isExpanded ? (
                <ChevronDown className="w-4 h-4" />
              ) : (
                <ChevronRight className="w-4 h-4" />
              )}
            </button>
          )}
        </div>

        {hasChildren && isExpanded && (
          <div className="ml-2">
            {item.children?.map(child => renderItem(child, level + 1))}
          </div>
        )}
      </div>
    )
  }

  return (
    <nav className="space-y-1">
      {navigation.map(item => renderItem(item))}
    </nav>
  )
}

// components/DocsLayout.tsx
import React from 'react'
import Header from './Header'
import Footer from './Footer'
import Sidebar from './Sidebar'
import { SidebarItem } from './Sidebar'

interface DocsLayoutProps {
  children: React.ReactNode
  navigation: SidebarItem[]
}

export default function DocsLayout({ children, navigation }: DocsLayoutProps) {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      <div className="flex-1 flex">
        {/* Sidebar */}
        <aside className="hidden lg:block w-64 bg-white border-r border-gray-200 overflow-y-auto">
          <div className="p-6">
            <Sidebar navigation={navigation} />
          </div>
        </aside>

        {/* Main content */}
        <main className="flex-1 overflow-y-auto">
          <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {children}
          </div>
        </main>
      </div>

      <Footer />
    </div>
  )
}

// components/CodeBlock.tsx
'use client'
import React, { useState } from 'react'
import { Copy, Check } from 'lucide-react'

interface CodeBlockProps {
  children: string
  language?: string
  title?: string
}

export default function CodeBlock({ children, language = 'javascript', title }: CodeBlockProps) {
  const [copied, setCopied] = useState(false)

  const copyToClipboard = async () => {
    await navigator.clipboard.writeText(children)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <div className="relative bg-gray-900 rounded-lg overflow-hidden">
      {title && (
        <div className="bg-gray-800 px-4 py-2 text-sm text-gray-300 border-b border-gray-700">
          {title}
        </div>
      )}
      
      <div className="relative">
        <pre className="p-4 text-sm text-gray-100 overflow-x-auto">
          <code className={`language-${language}`}>
            {children}
          </code>
        </pre>
        
        <button
          onClick={copyToClipboard}
          className="absolute top-2 right-2 p-2 text-gray-400 hover:text-gray-200 transition-colors"
        >
          {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
        </button>
      </div>
    </div>
  )
}

// app/get-started/page.tsx
import React from 'react'
import DocsLayout from '@/components/DocsLayout'
import { ChevronRight, Download, Settings, Rocket } from 'lucide-react'
import Link from 'next/link'

const navigation = [
  {
    title: 'Get Started',
    children: [
      { title: 'Overview', href: '/get-started' },
      { title: 'Installation', href: '/get-started/installation' },
      { title: 'License Activation', href: '/get-started/license' },
      { title: 'First Form', href: '/get-started/first-form' },
      { title: 'Display Form', href: '/get-started/display-form' },
    ]
  }
]

export default function GetStartedPage() {
  const steps = [
    {
      icon: <Download className="w-6 h-6" />,
      title: 'Installation & Setup',
      description: 'Install the plugin and activate your license',
      href: '/get-started/installation'
    },
    {
      icon: <Settings className="w-6 h-6" />,
      title: 'Create Your First Form',
      description: 'Build a simple contact form in minutes',
      href: '/get-started/first-form'
    },
    {
      icon: <Rocket className="w-6 h-6" />,
      title: 'Publish & Configure',
      description: 'Add the form to your page and set up actions',
      href: '/get-started/display-form'
    }
  ]

  return (
    <DocsLayout navigation={navigation}>
      <div className="prose-custom">
        <h1 className="text-4xl font-bold text-gray-900 mb-6">
          Getting Started with JetFormBuilder
        </h1>
        
        <p className="text-xl text-gray-600 mb-8">
          JetFormBuilder is a powerful WordPress form builder that helps you create 
          everything from simple contact forms to complex multi-step workflows with 
          payments, conditional logic, and advanced integrations.
        </p>

        {/* Quick Overview */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
          <h2 className="text-lg font-semibold text-blue-900 mb-4">
            What You'll Learn
          </h2>
          <ul className="text-blue-800 space-y-2">
            <li>• How to install and configure JetFormBuilder</li>
            <li>• Creating your first form with essential fields</li>
            <li>• Adding forms to pages and posts</li>
            <li>• Setting up basic actions and notifications</li>
          </ul>
        </div>

        {/* Step-by-step guide */}
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          Step-by-Step Guide
        </h2>

        <div className="grid gap-6 mb-8">
          {steps.map((step, index) => (
            <Link 
              key={index}
              href={step.href}
              className="block p-6 border border-gray-200 rounded-lg hover:border-primary-300 hover:bg-primary-50 transition-colors"
            >
              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0 p-2 bg-primary-100 rounded-lg text-primary-600">
                  {step.icon}
                </div>
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    {index + 1}. {step.title}
                  </h3>
                  <p className="text-gray-600 mb-2">
                    {step.description}
                  </p>
                  <span className="inline-flex items-center text-primary-600 font-medium">
                    Continue
                    <ChevronRight className="ml-1 w-4 h-4" />
                  </span>
                </div>
              </div>
            </Link>
          ))}
        </div>

        {/* Prerequisites */}
        <h2 className="text-2xl font-bold text-gray-900 mb-4">
          Prerequisites
        </h2>
        
        <div className="bg-gray-50 rounded-lg p-6 mb-8">
          <h3 className="font-semibold text-gray-900 mb-3">System Requirements</h3>
          <ul className="text-gray-700 space-y-1">
            <li>• WordPress 5.0 or higher</li>
            <li>• PHP 7.4 or higher</li>
            <li>• MySQL 5.6 or higher</li>
            <li>• Modern web browser with JavaScript enabled</li>
          </ul>
        </div>

        {/* Next Steps */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-green-900 mb-4">
            Ready to Start?
          </h3>
          <p className="text-green-800 mb-4">
            Let's begin with installing JetFormBuilder and getting your first form up and running.
          </p>
          <Link 
            href="/get-started/installation"
            className="inline-flex items-center bg-green-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-green-700 transition-colors"
          >
            Start Installation
            <ChevronRight className="ml-2 w-4 h-4" />
          </Link>
        </div>
      </div>
    </DocsLayout>
  )
}

// app/get-started/installation/page.tsx
import React from 'react'
import DocsLayout from '@/components/DocsLayout'
import CodeBlock from '@/components/CodeBlock'
import { AlertCircle, Download, Key, CheckCircle } from 'lucide-react'

const navigation = [
  {
    title: 'Get Started',
    children: [
      { title: 'Overview', href: '/get-started' },
      { title: 'Installation', href: '/get-started/installation' },
      { title: 'License Activation', href: '/get-started/license' },
      { title: 'First Form', href: '/get-started/first-form' },
      { title: 'Display Form', href: '/get-started/display-form' },
    ]
  }
]

export default function InstallationPage() {
  return (
    <DocsLayout navigation={navigation}>
      <div className="prose-custom">
        <h1 className="text-4xl font-bold text-gray-900 mb-6">
          Installation & Setup
        </h1>
        
        <p className="text-xl text-gray-600 mb-8">
          Get JetFormBuilder installed and configured on your WordPress site in just a few minutes.
        </p>

        {/* Installation Methods */}
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          Installation Methods
        </h2>

        {/* Method 1: WordPress Admin */}
        <div className="bg-white border border-gray-200 rounded-lg p-6 mb-6">
          <div className="flex items-center space-x-3 mb-4">
            <Download className="w-5 h-5 text-primary-600" />
            <h3 className="text-lg font-semibold text-gray-900">
              Method 1: WordPress Admin Dashboard
            </h3>
          </div>
          
          <ol className="space-y-3 text-gray-700">
            <li>1. Log in to your WordPress admin dashboard</li>
            <li>2. Navigate to <strong>Plugins → Add New</strong></li>
            <li>3. Search for "JetFormBuilder"</li>
            <li>4. Click <strong>Install Now</strong> on the JetFormBuilder plugin</li>
            <li>5. Click <strong>Activate</strong> after installation completes</li>
          </ol>
        </div>

        {/* Method 2: Manual Upload */}
        <div className="bg-white border border-gray-200 rounded-lg p-6 mb-8">
          <div className="flex items-center space-x-3 mb-4">
            <Key className="w-5 h-5 text-primary-600" />
            <h3 className="text-lg font-semibold text-gray-900">
              Method 2: Manual Upload (Pro Version)
            </h3>
          </div>
          
          <ol className="space-y-3 text-gray-700 mb-4">
            <li>1. Download the plugin ZIP file from your Crocoblock account</li>
            <li>2. Go to <strong>Plugins → Add New → Upload Plugin</strong></li>
            <li>3. Choose the downloaded ZIP file</li>
            <li>4. Click <strong>Install Now</strong></li>
            <li>5. Click <strong>Activate Plugin</strong></li>
          </ol>

          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-start space-x-3">
              <AlertCircle className="w-5 h-5 text-blue-600 mt-0.5" />
              <div>
                <h4 className="font-semibold text-blue-900">Pro Version Note</h4>
                <p className="text-blue-800 text-sm">
                  The Pro version requires a valid license key and includes advanced features 
                  like Stripe payments, advanced fields, and premium integrations.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* License Activation */}
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          License Activation (Pro)
        </h2>

        <div className="bg-white border border-gray-200 rounded-lg p-6 mb-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Activating Your License Key
          </h3>
          
          <ol className="space-y-3 text-gray-700 mb-6">
            <li>1. Navigate to <strong>Crocoblock → License</strong> in your WordPress admin</li>
            <li>2. Enter your license key in the provided field</li>
            <li>3. Click <strong>Activate License</strong></li>
            <li>4. You should see a success message confirming activation</li>
          </ol>

          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-start space-x-3">
              <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
              <div>
                <h4 className="font-semibold text-green-900">Find Your License Key</h4>
                <p className="text-green-800 text-sm">
                  Your license key is available in your Crocoblock account dashboard 
                  under the "Licenses" section.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Verification */}
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          Verify Installation
        </h2>

        <div className="bg-white border border-gray-200 rounded-lg p-6 mb-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Check That Everything Works
          </h3>
          
          <ul className="space-y-3 text-gray-700">
            <li>✓ You should see <strong>JetFormBuilder</strong> in your admin menu</li>
            <li>✓ Navigate to <strong>JetFormBuilder → Add New</strong> to create forms</li>
            <li>✓ Check that all required dependencies are met</li>
            <li>✓ Verify your license is active (Pro version only)</li>
          </ul>
        </div>

        {/* Troubleshooting */}
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          Common Installation Issues
        </h2>

        <div className="space-y-4 mb-8">
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-900 mb-2">
              "Plugin could not be activated" Error
            </h4>
            <p className="text-yellow-800 text-sm">
              This usually indicates a PHP version conflict. Ensure your server runs PHP 7.4 or higher.
            </p>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-900 mb-2">
              License Key Not Working
            </h4>
            <p className="text-yellow-800 text-sm">
              Verify the license key is copied correctly and that your Crocoblock subscription is active.
            </p>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-semibold text-yellow-900 mb-2">
              Missing Dependencies
            </h4>
            <p className="text-yellow-800 text-sm">
              JetFormBuilder works best with Elementor, Gutenberg, or Bricks. Install your preferred page builder.
            </p>
          </div>
        </div>

        {/* Next Steps */}
        <div className="bg-primary-50 border border-primary-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-primary-900 mb-4">
            What's Next?
          </h3>
          <p className="text-primary-800 mb-4">
            Now that JetFormBuilder is installed, let's create your first form!
          </p>
          <a 
            href="/get-started/first-form"
            className="inline-flex items-center bg-primary-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-primary-700 transition-colors"
          >
            Create Your First Form →
          </a>
        </div>
      </div>
    </DocsLayout>
  )
}

etFormBuilder form. Here's what you can explore next:

- [Add the form to your page](/get-started/display-form)
- [Learn about advanced fields](/build-forms/advanced-fields)
- [Set up conditional logic](/build-forms/conditional-logic)
- [Configure payment processing](/integrate-extend/payments)

<div className="bg-green-50 border border-green-200 rounded-lg p-4 mt-6">
  <strong>Pro Tip:</strong> Start simple and add complexity gradually. You can always come back and add more fields or advanced features later.
</div>
